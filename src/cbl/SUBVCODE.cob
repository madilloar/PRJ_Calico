000010*>
000020 IDENTIFICATION DIVISION.
000030 PROGRAM-ID.   SUBVCODE.
000040 ENVIRONMENT    DIVISION.
000050 CONFIGURATION  SECTION.
000060 DATA DIVISION.
000090 WORKING-STORAGE SECTION.
000102*--------------------------------------------------------------
000103*- その他ワーク。
000104*--------------------------------------------------------------
000105 01       WK000             SYNC.
000110   03     WK000MYNAME.
000111     05   FILLER            PIC X(11) VALUE 'PROGRAM-ID:'.
000112     05   FILLER            PIC X(8)  VALUE 'SUBVCODE'.
000113     05   WK000SECTION      PIC X(8).
000120 01       WKB00             SYNC.
000121   03     WKB00I            PIC 9(5).
000132*--------------------------------------------------------------
000133*- スタック:スタックモジュールCALLパラメータ。
000134*--------------------------------------------------------------
000135 01       PSTACK-PRM        SYNC.
000340   COPY   RSTACK-PRM.
000144*--------------------------------------------------------------
000145*- スタック:右辺と左辺データを格納したアドレス情報(9(5))を、
000145*- POPやPUSHするときの受け渡しエリア。
000146*--------------------------------------------------------------
000147 01       PSTACK-VAL        SYNC.
000148   03     FILLER            PIC 9(5).
000149*--------------------------------------------------------------
000150*- スタック:スタック内部制御情報。
000151*--------------------------------------------------------------
000152 01       PSTACK-CTR        SYNC.
000340   COPY   RSTACK-CTR.
000161*--------------------------------------------------------------
000162*- スタックメモリエリア。
000163*- スタックには右辺と左辺データを格納したアドレスの情報(9(5))と
000164*- 真偽値TRUE(1:X(1))、FALSE(0:X(1))の情報を格納する。
000165*- 一つ前の真偽値で1要素。式の右辺と左辺の要素数を20個を
000166*- 格納できるものとする。
000167*- 通常の式であれば、A = Bのように2項演算なので、右辺と左辺の
000168*- 要素数は、2個であるが、IN演算子のような場合は、右辺の数に
000169*- ともなって要素数が増えるので、スタック深さ制限は22個とした。
000170*- (式を評価する(演算子がくる)ごとにスタックをPOPするので、
000171*- それほどスタックを深くする必要はないと判断した。)
000172*- 例:A IN ('1','2','3')の場合
000173*- 右辺と左辺の要素数は、右辺(1) + 左辺(3) + 要素数(1)で、
000174*- スタックに積まれる要素数は、5となる。
000175*- また要素と要素の区切りに、X(1)用いる。
000176*- X(1) * 1 + X(5) * 20 + X(1) * 22 = 122
000177*- 切り上げでX(200)。
000178*--------------------------------------------------------------
000179 01       PSTACK-MEM        SYNC.
000180   03     FILLER            PIC X(200).
000181*--------------------------------------------------------------
000182*- メモリ:メモリモジュールCALLパラメータ。
000183*--------------------------------------------------------------
000184 01       PMYMEM-PRM        SYNC.
000185   COPY   RMYMEM-PRM.
000192*--------------------------------------------------------------
000193*- メモリ:リテラル1要素のMAX-LENGTHはX(100)。
000194*--------------------------------------------------------------
000195 01       PMYMEM-VAL        SYNC.
000196   03     FILLER            PIC X(100).
000203*--------------------------------------------------------------
000204*- メモリ:メモリエリア。
000205*- 算出根拠:
000206*- 1条件に登場する左辺の項目数=5。
000207*- 1条件に登場する右辺(大体がリテラルのはず)の要素数=5。
000208*- 1条件のアクション部用の要素数=5。
000209*- 左辺は、PIN100かPIN200、PIN300のアドレス参照データを
000210*- メモリエリアに格納する。その桁数はX(11)。
000211*- 例:PIN100の5桁目から2バイトなら、"10000500002"。
000212*- 右辺は、リテラルそのもので、リテラル平均長を10バイトと仮定。
000213*- リテラルには、先頭に"L"を付けてリテラルの意味としているので、
000214*- 都合X(11)
000215*- アクション部のリテラル平均長を20バイトと仮定。
000216*- 例:"1234567890"なら"L1234567890"。
000217*- 区切り文字にX(1)用いる。
000218*- X(11) * 10 + X(20) * 5 + X(1) * 14 = 224。
000219*- 切り上げでX(300)。
000220*--------------------------------------------------------------
000221 01       PMYMEM-MEM        SYNC.
000222   03     FILLER            PIC X(300).
000223*--------------------------------------------------------------
000224*- 仮想コード:パラメータで受け取った仮想コードを格納するエリア
000225*--------------------------------------------------------------
000226 01       VCODEAREA         SYNC.
000201   COPY   RVCODEAREA.
000236 LINKAGE SECTION.
000237*--------------------------------------------------------------
000238*-
000239*--------------------------------------------------------------
000240 01       PVCODE-PRM.
000201   COPY   RVCODE-PRM.
000253*--------------------------------------------------------------
000254*- IN1
000255*--------------------------------------------------------------
000256 01       PIN100.
000257   03     FILLER            PIC X(1).
000258*--------------------------------------------------------------
000259*- IN2
000260*--------------------------------------------------------------
000261 01       PIN200.
000262   03     FILLER            PIC X(1).
000263*--------------------------------------------------------------
000264*- IN3
000265*--------------------------------------------------------------
000266 01       PIN300.
000267   03     FILLER            PIC X(1).
000268*--------------------------------------------------------------
000269*- OUT
000270*--------------------------------------------------------------
000271 01       POUT00.
000272   03     FILLER            PIC X(1).
000273*--------------------------------------------------------------
000274*-
000275*--------------------------------------------------------------
000276 PROCEDURE DIVISION USING PVCODE-PRM
000277                          PIN100
000278                          PIN200
000279                          PIN300
000280                          POUT00.
000281  A00-MAIN SECTION.
000282*--------------------------------------------------------------
000283*-
000284*--------------------------------------------------------------
000285
000286 A00-010.
000287   MOVE 'A00-010.'          TO WK000SECTION.
000294   EVALUATE PVCODE-FUNC 
000330   WHEN 'INIT' PERFORM S00-INIT
000331   WHEN 'LOAD' PERFORM B00-LOAD
000335   WHEN 'EXEC' PERFORM C00-EXECUTE
000336   WHEN 'DUMP' PERFORM D00-DUMP
000337   WHEN 'RSET' PERFORM Z00-RESET
000339   END-EVALUATE.
000340 A00-EXIT.
000342   MOVE ZERO TO RETURN-CODE.
000343   GOBACK.
000344 B00-LOAD SECTION.
000345*--------------------------------------------------------------
000346*- 引数の仮想コードを仮想コードエリアにロードする。
000347*--------------------------------------------------------------
000348 B00-010.
000350   MOVE 'B00-010.'          TO WK000SECTION.
000351*-
000352   ADD 1                    TO VCODE-TBL-SZE.
000353*- TODO:INDEX OUT OF BOUNDS CHECK.
000354   MOVE PVCODE-OPR          TO VCODE-OPR(VCODE-TBL-SZE).
000357   EVALUATE PVCODE-OPR
000358   WHEN 'PUSHL'
000359     MOVE ZERO              TO WKB00I
000360     INSPECT PVCODE-OPD TALLYING WKB00I FOR CHARACTERS
000361       AFTER '"' BEFORE '"'
000363     MOVE 'SET_'            TO PMYMEM-FNC
000365     STRING 'L' PVCODE-OPD(2:WKB00I)
000367                          INTO PMYMEM-VAL
000368     ADD 1                  TO WKB00I
000369     MOVE WKB00I            TO PMYMEM-VLL
000372     CALL 'SUBMYMEM'     USING PMYMEM-PRM
000373                               PMYMEM-VAL
000375                               PMYMEM-MEM
000376                               PIN100
000377                               PIN200
000378                               PIN300
000379                               POUT00
000380*-TODO:ERR HANDRING
000381     MOVE PMYMEM-VLI        TO VCODE-ADR(VCODE-TBL-SZE)
000383   WHEN 'PUSHV'
000387     MOVE 'SET_'            TO PMYMEM-FNC
000388     MOVE PVCODE-OPD
000389                            TO PMYMEM-VAL
000390     MOVE ZERO              TO WKB00I
000391     INSPECT PVCODE-OPD TALLYING WKB00I FOR CHARACTERS
000392     MOVE WKB00I            TO PMYMEM-VLL
000393     CALL 'SUBMYMEM'     USING PMYMEM-PRM
000394                               PMYMEM-VAL
000396                               PMYMEM-MEM
000397                               PIN100
000398                               PIN200
000399                               PIN300
000400                               POUT00
000401*-TODO:ERR HANDRING
000406     MOVE PMYMEM-VLI        TO VCODE-ADR(VCODE-TBL-SZE)
000481*- WHEN OTHER
000482*- NOP
000483   END-EVALUATE.
000484*-
000485   MOVE ZERO                TO PVCODE-COD.
000486   STRING WK000MYNAME SPACE ',NORMAL END.  '
000487                            INTO PVCODE-MSG.
000488 B00-EXIT.
000489   EXIT.
000490 C00-EXECUTE SECTION.
000491*--------------------------------------------------------------
000492*- 仮想コードを実行する。
000493*--------------------------------------------------------------
000494 C00-010.
000495   MOVE 'C00-010.'          TO WK000SECTION.
000496*-
000497   CALL 'SUBMYALU'       USING PVCODE-PRM
000498                               PSTACK-PRM
000499                               PSTACK-VAL
000500                               PSTACK-CTR
000501                               PSTACK-MEM
000502                               PMYMEM-PRM
000503                               PMYMEM-VAL
000505                               PMYMEM-MEM
000506                               VCODEAREA
000507                               PIN100
000508                               PIN200
000509                               PIN300
000510                               POUT00.
000511
000512   MOVE ZERO                TO PVCODE-COD.
000513   STRING WK000MYNAME SPACE ',NORMAL END.  '
000514                            INTO PVCODE-MSG.
000515 C000-EXIT.
000516   EXIT.
000517 D00-DUMP SECTION.
000518*--------------------------------------------------------------
000519*- 仮想コードをDUMP。
000520*--------------------------------------------------------------
000521 D00-010.
000522   MOVE 'D00-010.'          TO WK000SECTION.
000523*-
000524   PERFORM VARYING WKB00I FROM 1 BY 1
000527   UNTIL WKB00I > VCODE-TBL-SZE
000537     DISPLAY WKB00I ':' VCODE-TBL(WKB00I)
000547   END-PERFORM
000557   DISPLAY 'MEM:(' PMYMEM-MEM ')'.
000567*-
000577   MOVE ZERO                TO PVCODE-COD.
000587   STRING WK000MYNAME SPACE ',NORMAL END.  '
000597                            INTO PVCODE-MSG.
000607 D000-EXIT.
000617   EXIT.
000739 Z00-RESET SECTION.
000740*--------------------------------------------------------------
000741*- 仮想コードを初期化する。
000742*--------------------------------------------------------------
000743 Z00-010.
000744   MOVE 'Z00-010.'          TO WK000SECTION.
000745*-
000746   MOVE SPACE               TO VCODEAREA.
000747   MOVE ZERO                TO VCODE-TBL-SZE.
000748*-
000749   MOVE ZERO                TO PVCODE-COD.
000750   STRING WK000MYNAME SPACE ',NORMAL END.  '
000751                            INTO PVCODE-MSG.
000752 Z00-EXIT.
000753   EXIT.
000754 S00-INIT SECTION.
000755*--------------------------------------------------------------
000756*- 初期化。
000757*--------------------------------------------------------------
000758 S00-010.
000759   MOVE SPACE               TO PMYMEM-PRM.
000760   MOVE 'INIT'              TO PMYMEM-FNC.
000761   MOVE 300                 TO PMYMEM-MEM-SZE.
000762   CALL 'SUBMYMEM'       USING PMYMEM-PRM
000763                               PMYMEM-VAL
000765                               PMYMEM-MEM
000766                               PIN100
000767                               PIN200
000768                               PIN300
000769                               POUT00.
000770   MOVE SPACE               TO PSTACK-PRM.
000771   MOVE 'INIT'              TO PSTACK-FNC.
000772   MOVE 200                 TO PSTACK-MEM-SZE.
000773   CALL 'SUBSTACK'       USING PSTACK-PRM
000774                               PSTACK-VAL
000775                               PSTACK-CTR
000776                               PSTACK-MEM.
000777   MOVE -1                  TO PVCODE-COD.
000778   STRING WK000MYNAME SPACE 'ABNORMAL END'
000779                            INTO PVCODE-MSG.
000780 S00-EXIT.
000787   EXIT.

